using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace COTG.JSON
{
	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using COTG;
	//
	//    var troops = Troops.FromJson(jsonString);

		using System;
		using System.Collections.Generic;

		using System.Globalization;
		using System.Text.Json;
		using J = System.Text.Json.Serialization.JsonPropertyNameAttribute;
	
		public sealed class PPDT
		{
			[J("_id")] public long Id { get; set; }
			[J("pn")] public string Pn { get; set; }
			[J("pid")] public long Pid { get; set; }
			[J("lcit")] public long Lcit { get; set; }
			[J("r")] public long R { get; set; }
			[J("t")] public string T { get; set; }
			[J("sc")] public long Sc { get; set; }
			[J("g")] public G G { get; set; }
			[J("m")] public M M { get; set; }
			[J("ms")] public M Ms { get; set; }
			[J("cac")] public long Cac { get; set; }
			[J("cc")] public long Cc { get; set; }
			[J("bc")] public long Bc { get; set; }
			[J("b")] public long B { get; set; }
			[J("bi")] public long Bi { get; set; }
			[J("bq")] public long Bq { get; set; }
			[J("pr")] public Dictionary<string, long> Pr { get; set; }
			[J("c")] public Dictionary<string, Lc>[] C { get; set; }
			[J("cg")] public object[] Cg { get; set; }
			[J("rs")] public Dictionary<string, RValue> Rs { get; set; }
			[J("rw")] public Rw[] Rw { get; set; }
			[J("ts")] public long Ts { get; set; }
			[J("clc")] public Dictionary<string, long[]> Clc { get; set; }
			[J("lc")] public Dictionary<string, Lc> Lc { get; set; }
			[J("wmo")] public Dictionary<string, Lc> Wmo { get; set; }
			[J("cob")] public Dictionary<string, long> Cob { get; set; }
			[J("cobm")] public Dictionary<string, long> Cobm { get; set; }
			[J("npp")] public long Npp { get; set; }
			[J("cl")] public Dictionary<string, string> Cl { get; set; }
			[J("cln")] public long[] Cln { get; set; }
			[J("ft")] public long[] Ft { get; set; }
			[J("opt")] public Dictionary<string, Lc> Opt { get; set; }
			[J("hlp")] public long[] Hlp { get; set; }
			[J("arc")] public long Arc { get; set; }
			[J("lock")] public long Lock { get; set; }
			[J("nppf")] public string Nppf { get; set; }
			[J("planame")] public string Planame { get; set; }
			[J("cb")] public long Cb { get; set; }
			[J("prot")] public Prot Prot { get; set; }
			[J("fa")] public Dictionary<string, long> Fa { get; set; }
			[J("paid")] public long Paid { get; set; }
			[J("fwc")] public long Fwc { get; set; }
			[J("sco")] public long Sco { get; set; }
			[J("mibt")] public long Mibt { get; set; }
			[J("alatitties")] public long Alatitties { get; set; }
			[J("td")] public Mvb Td { get; set; }
			[J("mvb")] public Mvb Mvb { get; set; }
			[J("mats")] public long Mats { get; set; }
			[J("lrct")] public long Lrct { get; set; }
			[J("repcnt")] public long Repcnt { get; set; }
			[J("crw")] public long Crw { get; set; }
			[J("pccount")] public long Pccount { get; set; }
			[J("gr")] public long Gr { get; set; }
			[J("fec")] public long Fec { get; set; }
			[J("specse")] public long Specse { get; set; }
			[J("gra")] public Gra Gra { get; set; }
			[J("upcits")] public long Upcits { get; set; }
			[J("itc")] public Dictionary<string, long> Itc { get; set; }
			[J("suba")] public long Suba { get; set; }
			[J("subb")] public long Subb { get; set; }
			[J("subc")] public long Subc { get; set; }
			[J("blk")] public object[] Blk { get; set; }
			[J("clitm")] public Dictionary<string, long> Clitm { get; set; }
		}

		public partial class G
		{
			[J("t")] public long T { get; set; }
			[J("b")] public long B { get; set; }
		}

		public partial class Gra
		{
			[J("t")] public string T { get; set; }
		}

		public partial class M
		{
			[J("t")] public long T { get; set; }
			[J("b")] public long B { get; set; }
			[J("r")] public long R { get; set; }
			[J("f")] public long? F { get; set; }
		}

		public partial class Mvb
		{
			[J("t")] public long T { get; set; }
			[J("l")] public double L { get; set; }
		}

		public partial class Prot
		{
			[J("s")] public long S { get; set; }
			[J("e")] public long E { get; set; }
			[J("sf")] public long Sf { get; set; }
			[J("ef")] public long Ef { get; set; }
		}

		public partial class RValue
		{
			[J("n")] public long N { get; set; }
			[J("l")] public long L { get; set; }
		}

		public partial class Rw
		{
			[J("p")] public double P { get; set; }
			[J("l")] public long L { get; set; }
		}

		public partial struct Lc
		{
			public long? Integer;
			public string String;

			public static implicit operator Lc(long Integer) => new Lc { Integer = Integer };
			public static implicit operator Lc(string String) => new Lc { String = String };
		}

		//public partial class Troops
		//{
		//	public static Troops FromJson(string json) => JsonConvert.DeserializeObject<Troops>(json, COTG.Converter.Settings);
		//}

		//public static class Serialize
		//{
		//	public static string ToJson(this Troops self) => JsonConvert.SerializeObject(self, COTG.Converter.Settings);
		//}

		//internal static class Converter
		//{
		//	public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		//	{
		//		MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
		//		DateParseHandling = DateParseHandling.None,
		//		Converters =
		//	{
		//		LcConverter.Singleton,
		//		new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
		//	},
		//	};
		//}

		//internal class LcConverter : JsonConverter
		//{
		//	public override bool CanConvert(Type t) => t == typeof(Lc) || t == typeof(Lc?);

		//	public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		//	{
		//		switch (reader.TokenType)
		//		{
		//			case JsonToken.Integer:
		//				var integerValue = serializer.Deserialize<long>(reader);
		//				return new Lc { Integer = integerValue };
		//			case JsonToken.String:
		//			case JsonToken.Date:
		//				var stringValue = serializer.Deserialize<string>(reader);
		//				return new Lc { String = stringValue };
		//		}
		//		throw new Exception("Cannot unmarshal type Lc");
		//	}

		//	public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		//	{
		//		var value = (Lc)untypedValue;
		//		if (value.Integer != null)
		//		{
		//			serializer.Serialize(writer, value.Integer.Value);
		//			return;
		//		}
		//		if (value.String != null)
		//		{
		//			serializer.Serialize(writer, value.String);
		//			return;
		//		}
		//		throw new Exception("Cannot marshal type Lc");
		//	}

		//	public static readonly LcConverter Singleton = new LcConverter();
		//}

		//internal class DecodingChoiceConverter : JsonConverter
		//{
		//	public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		//	public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		//	{
		//		if (reader.TokenType == JsonToken.Null) return null;
		//		switch (reader.TokenType)
		//		{
		//			case JsonToken.Integer:
		//				var integerValue = serializer.Deserialize<long>(reader);
		//				return integerValue;
		//			case JsonToken.String:
		//			case JsonToken.Date:
		//				var stringValue = serializer.Deserialize<string>(reader);
		//				long l;
		//				if (Int64.TryParse(stringValue, out l))
		//				{
		//					return l;
		//				}
		//				break;
		//		}
		//		throw new Exception("Cannot unmarshal type long");
		//	}

		//	public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		//	{
		//		if (untypedValue == null)
		//		{
		//			serializer.Serialize(writer, null);
		//			return;
		//		}
		//		var value = (long)untypedValue;
		//		serializer.Serialize(writer, value);
		//		return;
		//	}

		//	public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
		//}

		//internal class ParseStringConverter : JsonConverter
		//{
		//	public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		//	public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		//	{
		//		if (reader.TokenType == JsonToken.Null) return null;
		//		var value = serializer.Deserialize<string>(reader);
		//		long l;
		//		if (Int64.TryParse(value, out l))
		//		{
		//			return l;
		//		}
		//		throw new Exception("Cannot unmarshal type long");
		//	}

		//	public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		//	{
		//		if (untypedValue == null)
		//		{
		//			serializer.Serialize(writer, null);
		//			return;
		//		}
		//		var value = (long)untypedValue;
		//		serializer.Serialize(writer, value.ToString());
		//		return;
		//	}

		//	public static readonly ParseStringConverter Singleton = new ParseStringConverter();
		}
